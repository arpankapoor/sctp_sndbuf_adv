diff --git a/include/linux/sctp.h b/include/linux/sctp.h
index a9414fd..3719e20 100644
--- a/include/linux/sctp.h
+++ b/include/linux/sctp.h
@@ -102,6 +102,9 @@ typedef enum {
 	/* AUTH Extension Section 4.1 */
 	SCTP_CID_AUTH			= 0x0F,
 
+	/* SNDBUF_ADV */
+	SCTP_CID_SNDBUF_ADV		= 0x96,
+
 	/* PR-SCTP Sec 3.2 */
 	SCTP_CID_FWD_TSN		= 0xC0,
 
diff --git a/include/net/netns/sctp.h b/include/net/netns/sctp.h
index c501d67..c2d38c5 100644
--- a/include/net/netns/sctp.h
+++ b/include/net/netns/sctp.h
@@ -75,6 +75,9 @@ struct netns_sctp {
 	/* HB.interval		    - 30 seconds  */
 	unsigned int hb_interval;
 
+	/* SNDBUF_ADV.interval	    - 5 seconds  */
+	unsigned int sndbuf_adv_interval;
+
 	/* Association.Max.Retrans  - 10 attempts
 	 * Path.Max.Retrans	    - 5	 attempts (per destination address)
 	 * Max.Init.Retransmits	    - 8	 attempts
diff --git a/include/net/sctp/constants.h b/include/net/sctp/constants.h
index 8c337cd..63ad595 100644
--- a/include/net/sctp/constants.h
+++ b/include/net/sctp/constants.h
@@ -92,9 +92,10 @@ typedef enum {
 	SCTP_EVENT_TIMEOUT_HEARTBEAT,
 	SCTP_EVENT_TIMEOUT_SACK,
 	SCTP_EVENT_TIMEOUT_AUTOCLOSE,
+	SCTP_EVENT_TIMEOUT_SNDBUF_ADV,
 } sctp_event_timeout_t;
 
-#define SCTP_EVENT_TIMEOUT_MAX		SCTP_EVENT_TIMEOUT_AUTOCLOSE
+#define SCTP_EVENT_TIMEOUT_MAX		SCTP_EVENT_TIMEOUT_SNDBUF_ADV
 #define SCTP_NUM_TIMEOUT_TYPES		(SCTP_EVENT_TIMEOUT_MAX + 1)
 
 typedef enum {
@@ -262,6 +263,9 @@ enum { SCTP_MAX_GABS = 16 };
 /* Heartbeat interval - 30 secs */
 #define SCTP_DEFAULT_TIMEOUT_HEARTBEAT	(30*1000)
 
+/* Sendbuffer advertisement interval - 5 secs */
+#define SCTP_DEFAULT_TIMEOUT_SNDBUF_ADV	(5*1000)
+
 /* Delayed sack timer - 200ms */
 #define SCTP_DEFAULT_TIMEOUT_SACK	(200)
 
diff --git a/include/net/sctp/sm.h b/include/net/sctp/sm.h
index efc0174..9194559 100644
--- a/include/net/sctp/sm.h
+++ b/include/net/sctp/sm.h
@@ -115,6 +115,7 @@ sctp_state_fn_t sctp_sf_t2_timer_expire;
 sctp_state_fn_t sctp_sf_t4_timer_expire;
 sctp_state_fn_t sctp_sf_t5_timer_expire;
 sctp_state_fn_t sctp_sf_sendbeat_8_3;
+sctp_state_fn_t sctp_sf_send_sndbuf_adv;
 sctp_state_fn_t sctp_sf_beat_8_3;
 sctp_state_fn_t sctp_sf_backbeat_8_3;
 sctp_state_fn_t sctp_sf_do_9_2_final;
@@ -235,6 +236,8 @@ struct sctp_chunk *sctp_make_heartbeat_ack(const struct sctp_association *,
 				      const struct sctp_chunk *,
 				      const void *payload,
 				      const size_t paylen);
+struct sctp_chunk *sctp_make_sndbuf_adv(const struct sctp_association *,
+					const struct sctp_transport *);
 struct sctp_chunk *sctp_make_op_error(const struct sctp_association *,
 				 const struct sctp_chunk *chunk,
 				 __be16 cause_code,
diff --git a/include/net/sctp/structs.h b/include/net/sctp/structs.h
index 5a404c3..8f68230 100644
--- a/include/net/sctp/structs.h
+++ b/include/net/sctp/structs.h
@@ -188,6 +188,11 @@ struct sctp_sock {
 	 */
 	__u32 hbinterval;
 
+	/* Sendbuffer advertisement interval.
+	 * Inherited by all new associations.
+	 */
+	__u32 sndbuf_adv_interval;
+
 	/* This is the max_retrans value for new associations. */
 	__u16 pathmaxrxt;
 
@@ -1583,6 +1588,9 @@ struct sctp_association {
 	 */
 	unsigned long hbinterval;
 
+	/* Sendbuffer advertisement interval. */
+	unsigned long sndbuf_adv_interval;
+
 	/* This is the max_retrans value for new transports in the
 	 * association.
 	 */
diff --git a/net/sctp/associola.c b/net/sctp/associola.c
index e1849f3..ca826c5 100644
--- a/net/sctp/associola.c
+++ b/net/sctp/associola.c
@@ -113,6 +113,11 @@ static struct sctp_association *sctp_association_init(struct sctp_association *a
 	 */
 	asoc->hbinterval = msecs_to_jiffies(sp->hbinterval);
 
+	/* Initialize the association's sendbuffer advertisement interval
+	 * based on the sock configured value.
+	 */
+	asoc->sndbuf_adv_interval = msecs_to_jiffies(sp->sndbuf_adv_interval);
+
 	/* Initialize path max retrans value. */
 	asoc->pathmaxrxt = sp->pathmaxrxt;
 
@@ -147,6 +152,8 @@ static struct sctp_association *sctp_association_init(struct sctp_association *a
 
 	asoc->timeouts[SCTP_EVENT_TIMEOUT_SACK] = asoc->sackdelay;
 	asoc->timeouts[SCTP_EVENT_TIMEOUT_AUTOCLOSE] = sp->autoclose * HZ;
+	asoc->timeouts[SCTP_EVENT_TIMEOUT_SNDBUF_ADV] =
+		asoc->sndbuf_adv_interval;
 
 	/* Initializes the timers */
 	for (i = SCTP_EVENT_TIMEOUT_NONE; i < SCTP_NUM_TIMEOUT_TYPES; ++i)
diff --git a/net/sctp/output.c b/net/sctp/output.c
index 9844fe5..db76dc8 100644
--- a/net/sctp/output.c
+++ b/net/sctp/output.c
@@ -271,13 +271,32 @@ static sctp_xmit_t __sctp_packet_append_chunk(struct sctp_packet *packet,
 					      struct sctp_chunk *chunk)
 {
 	sctp_xmit_t retval = SCTP_XMIT_OK;
+
+	int add_sndbuf_chunk = 0;
+	struct sctp_chunk *sndbuf_adv_chunk;
+
 	__u16 chunk_len = WORD_ROUND(ntohs(chunk->chunk_hdr->length));
 
+	/* If given packet is empty and given chunk is the first data chunk,
+	 * we should also append the send buffer advertisement chunk */
+	add_sndbuf_chunk = sctp_packet_empty(packet) &&
+		sctp_chunk_is_data(chunk);
+
 	/* Check to see if this chunk will fit into the packet */
-	retval = sctp_packet_will_fit(packet, chunk, chunk_len);
+	retval = sctp_packet_will_fit(packet, chunk, chunk_len +
+			add_sndbuf_chunk ? 4 : 0);
 	if (retval != SCTP_XMIT_OK)
 		goto finish;
 
+	if (add_sndbuf_chunk) {
+		/* Create SNBUF_ADV chunk */
+		sndbuf_adv_chunk = sctp_make_sndbuf_adv(packet->transport->asoc,
+				packet->transport);
+
+		/* Ideally, we should check the return value */
+		__sctp_packet_append_chunk(packet, sndbuf_adv_chunk);
+	}
+
 	/* We believe that this chunk is OK to add to the packet */
 	switch (chunk->chunk_hdr->type) {
 	case SCTP_CID_DATA:
diff --git a/net/sctp/outqueue.c b/net/sctp/outqueue.c
index 084718f..f982239 100644
--- a/net/sctp/outqueue.c
+++ b/net/sctp/outqueue.c
@@ -851,6 +851,7 @@ static int sctp_outq_flush(struct sctp_outq *q, int rtx_timeout, gfp_t gfp)
 
 		case SCTP_CID_SACK:
 		case SCTP_CID_HEARTBEAT:
+		case SCTP_CID_SNDBUF_ADV:
 		case SCTP_CID_SHUTDOWN:
 		case SCTP_CID_ECN_ECNE:
 		case SCTP_CID_ASCONF:
diff --git a/net/sctp/protocol.c b/net/sctp/protocol.c
index d3d50da..4d88bee 100644
--- a/net/sctp/protocol.c
+++ b/net/sctp/protocol.c
@@ -1246,6 +1246,9 @@ static int __net_init sctp_defaults_init(struct net *net)
 	/* HB.interval              - 30 seconds */
 	net->sctp.hb_interval			= SCTP_DEFAULT_TIMEOUT_HEARTBEAT;
 
+	/* SNDBUF_ADV.interval	    - 5 seconds */
+	net->sctp.sndbuf_adv_interval		= SCTP_DEFAULT_TIMEOUT_SNDBUF_ADV;
+
 	/* delayed SACK timeout */
 	net->sctp.sack_timeout			= SCTP_DEFAULT_TIMEOUT_SACK;
 
diff --git a/net/sctp/sm_make_chunk.c b/net/sctp/sm_make_chunk.c
index 56f364d..e26f073 100644
--- a/net/sctp/sm_make_chunk.c
+++ b/net/sctp/sm_make_chunk.c
@@ -1198,6 +1198,40 @@ nodata:
 	return retval;
 }
 
+/* Make a SNDBUF_ADV chunk.  */
+struct sctp_chunk *sctp_make_sndbuf_adv(const struct sctp_association *asoc,
+					const struct sctp_transport *transport)
+{
+	struct sctp_chunk *retval;
+	u32 lhs;
+	u32 rhs;
+	u8 sndbuf_percent = 0;
+
+	lhs = asoc->outqueue.out_qlen + asoc->outqueue.outstanding_bytes;
+	rhs = min(asoc->peer.rwnd, transport->cwnd);
+
+	/* Only 1 byte. No need of htons() */
+	if (lhs > rhs) {
+		sndbuf_percent = (u8)((((u64)(lhs - rhs)) * 10) /
+					asoc->sndbuf_used);
+	}
+
+	/* Put the send buffer percentage into the flags field */
+	retval = sctp_make_control(asoc, SCTP_CID_SNDBUF_ADV,
+			sndbuf_percent, 0, GFP_ATOMIC);
+
+	if (!retval)
+		goto nodata;
+
+	/* Cast away the 'const', as this is just telling the chunk
+	 * what transport it belongs to.
+	 */
+	retval->transport = (struct sctp_transport *) transport;
+
+nodata:
+	return retval;
+}
+
 /* Create an Operation Error chunk with the specified space reserved.
  * This routine can be used for containing multiple causes in the chunk.
  */
diff --git a/net/sctp/sm_sideeffect.c b/net/sctp/sm_sideeffect.c
index 41b081a..96c90c5 100644
--- a/net/sctp/sm_sideeffect.c
+++ b/net/sctp/sm_sideeffect.c
@@ -355,6 +355,13 @@ static void sctp_generate_autoclose_event(unsigned long data)
 	sctp_generate_timeout_event(asoc, SCTP_EVENT_TIMEOUT_AUTOCLOSE);
 }
 
+/* Generate a sendbuffer advt event. */
+static void sctp_generate_sndbuf_adv_event(unsigned long data)
+{
+	struct sctp_association *asoc = (struct sctp_association *) data;
+	sctp_generate_timeout_event(asoc, SCTP_EVENT_TIMEOUT_SNDBUF_ADV);
+}
+
 /* Generate a heart beat event.  If the sock is busy, reschedule.   Make
  * sure that the transport is still valid.
  */
@@ -455,6 +462,7 @@ sctp_timer_event_t *sctp_timer_events[SCTP_NUM_TIMEOUT_TYPES] = {
 	NULL,
 	sctp_generate_sack_event,
 	sctp_generate_autoclose_event,
+	sctp_generate_sndbuf_adv_event,
 };
 
 
diff --git a/net/sctp/sm_statefuns.c b/net/sctp/sm_statefuns.c
index f1f08c8..daca1a1 100644
--- a/net/sctp/sm_statefuns.c
+++ b/net/sctp/sm_statefuns.c
@@ -823,6 +823,8 @@ sctp_disposition_t sctp_sf_do_5_1D_ce(struct net *net,
 	SCTP_INC_STATS(net, SCTP_MIB_CURRESTAB);
 	SCTP_INC_STATS(net, SCTP_MIB_PASSIVEESTABS);
 	sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_START, SCTP_NULL());
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
 
 	if (new_asoc->timeouts[SCTP_EVENT_TIMEOUT_AUTOCLOSE])
 		sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,
@@ -912,6 +914,9 @@ sctp_disposition_t sctp_sf_do_5_1E_ca(struct net *net,
 	SCTP_INC_STATS(net, SCTP_MIB_CURRESTAB);
 	SCTP_INC_STATS(net, SCTP_MIB_ACTIVEESTABS);
 	sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_START, SCTP_NULL());
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
+
 	if (asoc->timeouts[SCTP_EVENT_TIMEOUT_AUTOCLOSE])
 		sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,
 				SCTP_TO(SCTP_EVENT_TIMEOUT_AUTOCLOSE));
@@ -1194,6 +1199,43 @@ sctp_disposition_t sctp_sf_backbeat_8_3(struct net *net,
 	return SCTP_DISPOSITION_CONSUME;
 }
 
+/* Generate a SNDBUF_ADV packet on the active_path transport.  */
+sctp_disposition_t sctp_sf_send_sndbuf_adv(struct net *net,
+					   const struct sctp_endpoint *ep,
+					   const struct sctp_association *asoc,
+					   const sctp_subtype_t type,
+					   void *arg,
+					   sctp_cmd_seq_t *commands)
+{
+	struct sctp_chunk *reply;
+
+	/* Copied from sctp_sf_sendbeat_8_3() */
+	if (asoc->overall_error_count >= asoc->max_retrans) {
+		sctp_add_cmd_sf(commands, SCTP_CMD_SET_SK_ERR,
+				SCTP_ERROR(ETIMEDOUT));
+		/* CMD_ASSOC_FAILED calls CMD_DELETE_TCB. */
+		sctp_add_cmd_sf(commands, SCTP_CMD_ASSOC_FAILED,
+				SCTP_PERR(SCTP_ERROR_NO_ERROR));
+		SCTP_INC_STATS(net, SCTP_MIB_ABORTEDS);
+		SCTP_DEC_STATS(net, SCTP_MIB_CURRESTAB);
+		return SCTP_DISPOSITION_DELETE_TCB;
+	}
+
+	/* Send a sendbuffer advert to the active peer.  */
+	reply = sctp_make_sndbuf_adv(asoc, asoc->peer.active_path);
+
+	/* Send sendbuffer advert chunk only if sndbuf_used > 0
+	 * and we have suffient memory.
+	 */
+	if (reply)
+		sctp_add_cmd_sf(commands, SCTP_CMD_REPLY, SCTP_CHUNK(reply));
+
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_RESTART,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
+
+	return SCTP_DISPOSITION_CONSUME;
+}
+
 /* Helper function to send out an abort for the restart
  * condition.
  */
@@ -1834,6 +1876,8 @@ static sctp_disposition_t sctp_sf_do_dupcook_b(struct net *net,
 			SCTP_STATE(SCTP_STATE_ESTABLISHED));
 	SCTP_INC_STATS(net, SCTP_MIB_CURRESTAB);
 	sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_START, SCTP_NULL());
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
 
 	repl = sctp_make_cookie_ack(new_asoc, chunk);
 	if (!repl)
@@ -1929,6 +1973,8 @@ static sctp_disposition_t sctp_sf_do_dupcook_d(struct net *net,
 		SCTP_INC_STATS(net, SCTP_MIB_CURRESTAB);
 		sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_START,
 				SCTP_NULL());
+		sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_START,
+				SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
 
 		/* RFC 2960 5.1 Normal Establishment of an Association
 		 *
@@ -2358,6 +2404,8 @@ static sctp_disposition_t sctp_sf_do_5_2_6_stale(struct net *net,
 	/* Stop pending T3-rtx and heartbeat timers */
 	sctp_add_cmd_sf(commands, SCTP_CMD_T3_RTX_TIMERS_STOP, SCTP_NULL());
 	sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_STOP, SCTP_NULL());
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_STOP,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
 
 	/* Delete non-primary peer ip addresses since we are transitioning
 	 * back to the COOKIE-WAIT state
@@ -5273,6 +5321,9 @@ sctp_disposition_t sctp_sf_do_9_2_start_shutdown(
 	 */
 	sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_STOP, SCTP_NULL());
 
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_STOP,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
+
 	sctp_add_cmd_sf(commands, SCTP_CMD_REPLY, SCTP_CHUNK(reply));
 
 	return SCTP_DISPOSITION_CONSUME;
@@ -5352,6 +5403,9 @@ sctp_disposition_t sctp_sf_do_9_2_shutdown_ack(
 	 */
 	sctp_add_cmd_sf(commands, SCTP_CMD_HB_TIMERS_STOP, SCTP_NULL());
 
+	sctp_add_cmd_sf(commands, SCTP_CMD_TIMER_STOP,
+			SCTP_TO(SCTP_EVENT_TIMEOUT_SNDBUF_ADV));
+
 	sctp_add_cmd_sf(commands, SCTP_CMD_REPLY, SCTP_CHUNK(reply));
 
 	return SCTP_DISPOSITION_CONSUME;
diff --git a/net/sctp/sm_statetable.c b/net/sctp/sm_statetable.c
index a987d54..e90df20 100644
--- a/net/sctp/sm_statetable.c
+++ b/net/sctp/sm_statetable.c
@@ -888,6 +888,25 @@ static const sctp_sm_table_entry_t other_event_table[SCTP_NUM_OTHER_TYPES][SCTP_
 	TYPE_SCTP_FUNC(sctp_sf_timer_ignore), \
 }
 
+#define TYPE_SCTP_EVENT_TIMEOUT_SNDBUF_ADV { \
+	/* SCTP_STATE_CLOSED */ \
+	TYPE_SCTP_FUNC(sctp_sf_timer_ignore), \
+	/* SCTP_STATE_COOKIE_WAIT */ \
+	TYPE_SCTP_FUNC(sctp_sf_timer_ignore), \
+	/* SCTP_STATE_COOKIE_ECHOED */ \
+	TYPE_SCTP_FUNC(sctp_sf_timer_ignore), \
+	/* SCTP_STATE_ESTABLISHED */ \
+	TYPE_SCTP_FUNC(sctp_sf_send_sndbuf_adv), \
+	/* SCTP_STATE_SHUTDOWN_PENDING */ \
+	TYPE_SCTP_FUNC(sctp_sf_send_sndbuf_adv), \
+	/* SCTP_STATE_SHUTDOWN_SENT */ \
+	TYPE_SCTP_FUNC(sctp_sf_timer_ignore), \
+	/* SCTP_STATE_SHUTDOWN_RECEIVED */ \
+	TYPE_SCTP_FUNC(sctp_sf_send_sndbuf_adv), \
+	/* SCTP_STATE_SHUTDOWN_ACK_SENT */ \
+	TYPE_SCTP_FUNC(sctp_sf_timer_ignore), \
+}
+
 static const sctp_sm_table_entry_t timeout_event_table[SCTP_NUM_TIMEOUT_TYPES][SCTP_STATE_NUM_STATES] = {
 	TYPE_SCTP_EVENT_TIMEOUT_NONE,
 	TYPE_SCTP_EVENT_TIMEOUT_T1_COOKIE,
@@ -899,6 +918,7 @@ static const sctp_sm_table_entry_t timeout_event_table[SCTP_NUM_TIMEOUT_TYPES][S
 	TYPE_SCTP_EVENT_TIMEOUT_HEARTBEAT,
 	TYPE_SCTP_EVENT_TIMEOUT_SACK,
 	TYPE_SCTP_EVENT_TIMEOUT_AUTOCLOSE,
+	TYPE_SCTP_EVENT_TIMEOUT_SNDBUF_ADV,
 };
 
 static const sctp_sm_table_entry_t *sctp_chunk_event_lookup(struct net *net,
diff --git a/net/sctp/socket.c b/net/sctp/socket.c
index 878d28e..1c68a02 100644
--- a/net/sctp/socket.c
+++ b/net/sctp/socket.c
@@ -4051,6 +4051,7 @@ static int sctp_init_sock(struct sock *sk)
 	 * be modified via SCTP_PEER_ADDR_PARAMS
 	 */
 	sp->hbinterval  = net->sctp.hb_interval;
+	sp->sndbuf_adv_interval = net->sctp.sndbuf_adv_interval;
 	sp->pathmaxrxt  = net->sctp.max_retrans_path;
 	sp->pathmtu     = 0; /* allow default discovery */
 	sp->sackdelay   = net->sctp.sack_timeout;
diff --git a/net/sctp/sysctl.c b/net/sctp/sysctl.c
index daf8554..8b617e4 100644
--- a/net/sctp/sysctl.c
+++ b/net/sctp/sysctl.c
@@ -197,6 +197,15 @@ static struct ctl_table sctp_net_table[] = {
 		.extra2         = &timer_max
 	},
 	{
+		.procname	= "sndbuf_adv_interval",
+		.data		= &init_net.sctp.sndbuf_adv_interval,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec_minmax,
+		.extra1         = &one,
+		.extra2         = &timer_max
+	},
+	{
 		.procname	= "association_max_retrans",
 		.data		= &init_net.sctp.max_retrans_association,
 		.maxlen		= sizeof(int),
